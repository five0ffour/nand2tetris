// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    // Use the address to direct the load signal to the appropriate component 
    DMux4Way(in=load, sel=address[13..14], a=r1, b=r2, c=scrn, d=kbd);

    // Tie the RAM segments to one addressable output
    Or(a=r1, b=r2, out=raml);

    // RAM - Address 0000-0x3fff - 0000 0000 0000 0000 b
    // Load the input value to the appropriate ram register if load enabled and capture the result 
    RAM16K(in=in, load=raml, address=address[0..13], out=ram);

    // Screen - Address 0x4000-5fff - 0100 0000 0000 0000 b
    // Load the input value to the screen register if load enabled and capture the result 
    Screen(in=in, load=scrn, address=address[0..12], out=scn);

    // Keyboard - Address 0x6000 - 24576 - 0110 0000 0000 0000 b
    // No load of keyboard, just capture the virtual address register
    Keyboard(out=key);

    // Output the appropriate register based on the selected address
    Mux4Way16(a=ram, b=ram, c=scn, d=key, sel=address[13..14], out=out);

    }