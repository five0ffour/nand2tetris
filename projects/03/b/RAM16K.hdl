// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

 // Solution:
 //     Author:  Michael Galarneau
 //     Date:  November 7, 2019

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Select logic, determine which address is enabled to send the load signal, all others w/b tied to 0
    DMux4Way(in=load, sel=address[12..13], a=s0, b=s1, c=s2, d=s3);

    // Pass the input to the registers and hold the responses
    RAM4K(in=in, load=s0, address=address[0..11], out=out0);
    RAM4K(in=in, load=s1, address=address[0..11], out=out1);
    RAM4K(in=in, load=s2, address=address[0..11], out=out2);
    RAM4K(in=in, load=s3, address=address[0..11], out=out3);

    // Output the given address based on the address selector and registers
    Mux4Way16(a=out0, b=out1, c=out2, d=out3, sel=address[12..13], out=out);
}