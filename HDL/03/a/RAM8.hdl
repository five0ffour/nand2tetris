// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

// Solution:
//  Author:  Michael Galarneau
//  Date:  November 7, 2019

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    
    // Select logic, determine which address is enabled to send the load signal, all others w/b tied to 0
    DMux8Way(in=load, sel=address, a=s0, b=s1, c=s2, d=s3, e=s4, f=s5, g=s6, h=s7);

    // Pass the input to the registers and hold the responses
    Register(in=in, load=s0, out=out0);
    Register(in=in, load=s1, out=out1);
    Register(in=in, load=s2, out=out2);
    Register(in=in, load=s3, out=out3);
    Register(in=in, load=s4, out=out4);
    Register(in=in, load=s5, out=out5);
    Register(in=in, load=s6, out=out6);
    Register(in=in, load=s7, out=out7);

    // Output the given address based on the address selector and registers
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address, out=out);

}