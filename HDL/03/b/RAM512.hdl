// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

 // Solution:
 //     Author:  Michael Galarneau
 //     Date:  November 7, 2019

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:

    // Select logic, determine which address is enabled to send the load signal, all others w/b tied to 0
    DMux8Way(in=load, sel=address[6..8], a=s0, b=s1, c=s2, d=s3, e=s4, f=s5, g=s6, h=s7);

    // Pass the input to the registers and hold the responses
    RAM64(in=in, load=s0, address=address[0..5], out=out0);
    RAM64(in=in, load=s1, address=address[0..5], out=out1);
    RAM64(in=in, load=s2, address=address[0..5], out=out2);
    RAM64(in=in, load=s3, address=address[0..5], out=out3);
    RAM64(in=in, load=s4, address=address[0..5], out=out4);
    RAM64(in=in, load=s5, address=address[0..5], out=out5);
    RAM64(in=in, load=s6, address=address[0..5], out=out6);
    RAM64(in=in, load=s7, address=address[0..5], out=out7);

    // Output the given address based on the address selector and registers
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address[6..8], out=out);

}